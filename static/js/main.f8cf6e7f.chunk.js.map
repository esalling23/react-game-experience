{"version":3,"sources":["helpers.js","components/Map/Spaceship.js","components/Map/Planet.js","components/Map/Star.js","components/MenuPanel/BGColorButton.js","components/MenuPanel/Panel.js","components/Map/Map.js","components/App.js","reportWebVitals.js","index.js"],"names":["randomNum","max","Math","floor","random","randomCondition","flyingSounds","map","s","BouncingShip","styled","motion","img","spaceshipVariants","flying","y","rotate","landed","transition","repeat","Infinity","Spaceship","engineSound","useMemo","Howl","src","length","volume","useState","isFlying","setIsFlying","useEffect","play","fade","once","stop","layoutId","variants","initial","animate","duration","onAnimationComplete","PlanetContainer","div","PlanetImg","Planet","handleClick","isSelected","name","hover","setHover","tapped","setTapped","planetVariants","bounce","repeatType","ease","circle","x","settle","delay","zoom","scale","animation","useCallback","baseAnimation","onClick","e","data-name","onTapStart","onMouseEnter","onMouseLeave","soundDir","caughtSounds","FlyingStar","props","leftOffset","topOffset","Star","containerRef","top","left","destroy","destroyTime","size","controls","useAnimation","starRef","useRef","destroyTimeout","isShooting","setIsShooting","isCaught","setIsCaught","soundPlayed","setSoundPlayed","shootSfx","rate","caughtSfx","starVariants","shooting","opacity","times","window","innerWidth","innerHeight","caught","options","root","current","rootMargin","threshold","checkStarVisible","entries","isIntersecting","star","observer","IntersectionObserver","observe","unobserve","start","then","clearTimeout","setTimeout","ref","MotionButton","button","bgColor","selected","BGColorButton","color","onComplete","className","backgroundColor","borderColor","type","stiffness","damping","SPIN_BTN_ANIM_OFFSET","MotionBackground","BGButtonContainer","SpinCloseButton","colors","sidebar","open","restDelta","closed","height","ButtonsPanel","clearSelected","planetSelected","addStars","selectedBtn","setSelectedBtn","isOpen","setIsOpen","style","width","whileHover","AnimateSharedLayout","c","bgMusic","p","planetImgs","MapContainer","PlanetsContainer","StarContainer","Map","stars","setStars","selectedPlanet","setSelectedPlanet","skyRef","mapMusic","loop","destroyStar","id","currStars","newStars","destroyOldStars","pop","filter","abs","Date","timestamp","STAR_SPEED","currentTarget","dataset","i","speed","el","count","Array","_x","sideToOffset","amountToOffset","filteredStars","App","data-testid","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QACaA,EAAY,SAACC,GACtB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,IAIzBI,EAAkB,WAC3B,OAAOL,EAAU,GAAK,G,OCQpBM,EARmB,CACrB,oBACA,qBACA,gBACA,mBACA,wBAGkCC,KAAI,SAAAC,GAAC,gBAT1B,0BAS0B,OAAkBA,MAIvDC,EAAeC,YAAOC,IAAOC,IAAdF,CAAH,yHAQZG,EAAoB,CACtBC,OAAQ,CACJC,EAAG,CAAC,EAAG,GAAI,GACXC,OAAQ,CAAC,EAAG,EAAG,GAAI,GAAI,IAE3BC,OAAQ,CACJF,EAAG,CAAC,EAAG,EAAG,GACVG,WAAY,CACRC,OAAQC,OAuCLC,EAlCG,WACd,IAAMC,EAAcC,mBAAQ,kBAAM,IAAIC,OAAK,CACvCC,IAAK,CAACnB,EAAaN,EAAUM,EAAaoB,OAAS,KACnDC,OAAQ,QACR,IAJgB,EAKYC,oBAAS,GALrB,mBAKbC,EALa,KAKHC,EALG,KAiBpB,OAVAC,qBAAU,WACFF,GACAP,EAAYU,OACZV,EAAYW,KAAK,EAAG,EAAG,OAEvBX,EAAYW,KAAKX,EAAYK,SAAU,EAAG,KAC1CL,EAAYY,KAAK,QAAQ,kBAAMZ,EAAYa,aAEhD,CAACb,EAAaO,IAGb,cAACpB,EAAD,CACI2B,SAAS,YACTC,SAAUxB,EACVyB,QAAQ,SACRC,QAASV,EAAW,SAAW,SAC/BX,WAAY,CACRsB,SAAU,GAEdf,IAjDS,mBAkDTgB,oBAAqB,WACbZ,GAAUC,GAAY,OC9DpCY,EAAkBhC,YAAOC,IAAOgC,IAAdjC,CAAH,wRAgBfkC,EAAYlC,YAAOC,IAAOC,IAAdF,CAAH,mEAiGAmC,EA5FA,SAAC,GAKT,IAJHjC,EAIE,EAJFA,IACAkC,EAGE,EAHFA,YACAC,EAEE,EAFFA,WACAC,EACE,EADFA,KACE,EACwBpB,oBAAS,GADjC,mBACKqB,EADL,KACYC,EADZ,OAI0BtB,oBAAS,GAJnC,mBAIKuB,EAJL,KAIaC,EAJb,KAMIC,EAAiB,CACnBC,OAAQ,CACJvC,EAAG,EAAE,EAAG,GACRC,OAAQ,EAAE,GAAI,IACdE,WAAY,CACRsB,SAAU,GACVe,WAAY,UACZpC,OAAQC,IACRoC,KAAM,cAGdC,OAAQ,CACJ1C,EAAG,CAAC,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,GACxC2C,EAAG,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAErCxC,WAAY,CACRC,OAAQC,IACRoB,SAAU,GACVgB,KAAM,WAGdG,OAAQ,CACJ5C,EAAG,CAAC,EAAGf,EAAU,IAAK,GACtBgB,OAAQ,CAAChB,GAAW,GAAIA,EAAU,KAClCkB,WAAY,CACRC,OAAQC,IACRmC,WAAY,UACZf,SAAU,EACVgB,KAAM,YACNI,MAAO5D,EAAU,KAGzB6D,KAAM,CACFC,MAAO,IACP5C,WAAY,CACRsB,SAAU,GACVgB,KAAM,eAKZO,EAAYC,uBAAY,WAC1B,OAAOjB,EAAa,SAAWE,EAAQ,SAAW,WACnD,CAACF,EAAYE,IAEVgB,EAAgBD,uBAAY,WAC9B,OAAOjB,EAAa,OAAS,WAC9B,CAACA,IAEJ,OACI,eAACL,EAAD,CACIwB,QAAS,SAAAC,GACAhB,GAAQL,EAAYqB,IAE7BC,YAAWpB,EACXqB,WAAY,SAAAF,GACRf,GAAU,GACVN,EAAYqB,IAEhBG,aAAc,SAAAH,GACLpB,GACDG,GAAS,IAGjBqB,aAAc,SAAAJ,GACVjB,GAAS,IAfjB,UAkBI,cAACN,EAAD,CACInB,IAAKb,EACLyB,SAAUgB,EACVf,QAAQ,SACRC,QAAkB,SAATS,EAAkBiB,IAAkBF,MAEhDhB,GACG,cAAC,EAAD,Q,QCvGVyB,EAAW,qBAaXlE,EAZmB,CACrB,mBACA,kBACA,oBACA,uBAQkCC,KAAI,SAAAC,GAAC,gBAAOgE,EAAP,oBAA2BhE,MAChEiE,EAPmB,CACrB,iBACA,cACA,aAIkClE,KAAI,SAAAC,GAAC,gBAAOgE,EAAP,kBAAyBhE,MAE9DkE,EAAahE,YAAOC,IAAOC,IAAdF,CAAH,6IAEJ,SAAAiE,GAAK,OAAIA,EAAMC,cAEhB,SAAAD,GAAK,OAAKA,EAAME,aA+HZC,EAxHF,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,aAAcC,EAA4C,EAA5CA,IAAKC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACrDC,EAAWC,cAEXC,EAAUC,iBAAO,MACjBC,EAAiBD,iBAAO,MAJwC,EAMlC5D,oBAAS,GANyB,mBAM/D8D,EAN+D,KAMnDC,EANmD,OAOtC/D,oBAAS,GAP6B,mBAO/DgE,EAP+D,KAOrDC,EAPqD,OAQhCjE,oBAAS,GARuB,mBAQ/DkE,EAR+D,KAQlDC,EARkD,KAUhEC,EAAWzE,mBAAQ,kBAAM,IAAIC,OAAK,CACpCC,IAAKnB,EAAaN,EAAUM,EAAaoB,OAAS,IAClDuE,KAAM,IACNtE,OAAQ,QACR,IACEuE,EAAY3E,mBAAQ,kBAAM,IAAIC,OAAK,CACrCC,IAAKgD,EAAazE,EAAUyE,EAAa/C,OAAS,IAClDuE,KAAM,IACNtE,OAAQ,OACR,IAEEwE,EAAe,CACjBC,SAAU,CACNpF,OAAQ,IACRqF,QAAS,CAAC,KAAM,MAAO,OAAQ,MAAO,MACtCC,MAAO,CAAC,EAAG,GAAK,GAAK,GAAK,GAC1B5C,EAAG6C,OAAOC,WACVzF,EAAGwF,OAAOE,YACVvF,WAAY,CACRsB,SAAU2C,IAGlBuB,OAAQ,CACJ5C,MAAO,EACPuC,QAAS,EACTnF,WAAY,CACRsB,SAtCQ,MA2CdmE,EAAUpF,mBAAQ,iBAAO,CAC3BqF,KAAM7B,EAAa8B,QACnBC,WAAY,MACZC,UAAW,KACX,CAAChC,IAGCiC,EAAmBhD,uBAAY,SAACiD,GAAY,YAC9BA,EAD8B,MAGpCC,iBAAmBpB,GAAeP,EAAQsB,UAChDb,EAAShE,OACT+D,GAAe,MAEpB,CAACD,EAAaP,EAASS,IAoD1B,OAlDAjE,qBAAU,WACN,IAAMoF,EAAO5B,EAAQsB,QACfO,EAAW,IAAIC,qBAAqBL,EAAkBL,GAM5D,OAJIQ,GACAC,EAASE,QAAQH,GAGd,WACCA,GAAMC,EAASG,UAAUJ,MAElC,CAAC5B,EAASyB,EAAkBL,IAI/B5E,qBAAU,WACF6D,GACAP,EAASlD,OACT+D,EAAUlE,OACVgE,EAAS/D,KAAK,EAAG,EAAG,KACpBiE,EAAUjE,KAAK,EAAG,EAAG,KAAKA,KAAK,EAAG,EAAG,KACrCoD,EAASmC,MAAM,UACNC,MAAK,WACFvC,IACAwC,aAAajC,EAAeoB,aAGnCnB,IACDC,GAAc,GACdN,EAASmC,MAAM,YACVC,MAAK,WACFvC,IACAwC,aAAajC,EAAeoB,eAI7C,CAACjB,EAAUP,EAAUH,EAASQ,EAAYQ,IAG7CnE,qBAAU,WAKN,OAJA0D,EAAeoB,QAAUc,YAAW,WAChCzC,MACa,IAAdC,GAEI,WACHuC,aAAajC,EAAeoB,YAEjC,CAAC1B,EAAaD,IAIb,cAACR,EAAD,CACIkD,IAAKrC,EACLX,WAAYK,GAAQ,SACpBJ,UAAWG,GAAO,SAClBvD,IAAc,UAAT2D,EA9IC,0BACC,2BA8IP/C,SAAU8D,EACV5D,QAAS8C,EACTf,aAAc,SAAAH,GAAC,OAAI0B,GAAY,OCpJrCgC,EAAenH,YAAOC,IAAOmH,OAAdpH,CAAH,otBACA,SAAAiE,GAAK,OAAIA,EAAMoD,WAoBT,SAAApD,GAAK,OAAIA,EAAMqD,SAAWrD,EAAMoD,QAAU,WA8CnDE,EAnCO,SAAC,GAKhB,IAJHC,EAIE,EAJFA,MACAnF,EAGE,EAHFA,WACAmB,EAEE,EAFFA,QACAiE,EACE,EADFA,WAEA,OACI,eAACN,EAAD,CACIE,QAAQ,cACRC,SAAUjF,EACVmB,QAASA,EAHb,UAKKnB,GACG,cAACpC,EAAA,EAAOgC,IAAR,CACIP,SAAS,iBACTgG,UAAU,iBACV9F,SAAS,EACTC,QAAS,CACL8F,gBAAiBH,EACjBI,YAAaJ,GAEjBhH,WAAY,CACRqH,KAAM,SACNC,UAAW,IACXC,QAAS,IAEbhG,oBAAqB0F,IAnBjC,eCjCFO,EAHiB,IAG+C,IAAxC,GAExBC,EAAmBjI,YAAOC,IAAOgC,IAAdjC,CAAH,0JACJ,SAAAiE,GAAK,OAAIA,EAAMoD,WAQ3Ba,EAAoBlI,YAAOC,IAAOgC,IAAdjC,CAAH,uOAajBmI,EAAkBnI,YAAOC,IAAOmH,OAAdpH,CAAH,+aA5BC,KAiDhBoI,EAAS,CACX,UACA,UACA,UACA,UACA,WAGEC,EAAU,CACZC,KAAM,CACF3C,QAAS,EACTtF,EAAG,EACHG,WAAY,CACRsB,SAAU,GACV+F,KAAM,SACN/E,KAAM,SACNF,OAAQ,GACR2F,UAAW,MAGnBC,OAAQ,CACJC,OAAQ,EACR9C,QAAS,EACTtF,EAAG,OACHG,WAAY,CACR0C,MAAO,GACP2E,KAAM,SACNC,UAAW,GACXC,QAAS,MAmENW,EA9DM,SAAC,GAIf,IAHHC,EAGE,EAHFA,cACAC,EAEE,EAFFA,eACAC,EACE,EADFA,SACE,EACoC3H,mBAASkH,EAAO,IADpD,mBACKU,EADL,KACkBC,EADlB,OAE0B7H,oBAAS,GAFnC,mBAEK8H,EAFL,KAEaC,EAFb,KAYF,OARA5H,qBAAU,WAEF4H,EADmB,SAAnBL,KAKL,CAACA,IAGA,eAACX,EAAD,CACIZ,QAAQ,QACR6B,MAAO,CACHT,OAAQ,OACRU,MAAO,QAEXtH,QAASmH,EAAS,OAAS,SAC3BrH,SAAU0G,EACVtG,oBAAqB,kBAAOiH,GAAUL,KAR1C,UAUI,cAACR,EAAD,CACIiB,WAAY,CACR9I,OAAQ,GACR8C,MA/GG,IAiHH/C,EAAE,GAAD,OAAK2H,EAAL,OACDhF,EAAE,GAAD,OAAKgF,EAAL,QAELxH,WAAY,CACRsB,SAAU,IAEd0B,QAAS,SAAAC,GACLwF,GAAU,MAGlB,cAACf,EAAD,CAAmBvG,SAAU,CACzB2G,KAAM,CAAE3C,QAAS,EAAGtF,EAAG,GACvBmI,OAAQ,CAAE7C,QAAS,EAAGtF,EAAG,SAF7B,SAII,cAACgJ,EAAA,EAAD,UACKjB,EAAOvI,KAAI,SAAAyJ,GAAC,OACT,cAAC,EAAD,CAEI9B,MAAO8B,EACPjH,WAAYyG,IAAgBQ,EAC5B9F,QAAS,kBAAMuF,EAAeO,IAC9B7B,WAAYoB,GAJPS,cCxH3BC,EALe,CACjB,2BACA,mBAGyB1J,KAAI,SAAA2J,GAAC,gBANjB,kBAMiB,OAAkBA,MAE9CC,EAAa,CACf,4BACA,+BACA,6BACA,4BACA,6BAMEC,EAAe1J,IAAOiC,IAAV,wOAFP,2BAaL0H,EAAmB3J,IAAOiC,IAAV,uPAYhB2H,GAAgB5J,YAAOC,IAAOgC,IAAdjC,CAAH,0HAoHJ6J,GArGH,WAAO,IAAD,EACY3I,mBAAS,IADrB,mBACP4I,EADO,KACAC,EADA,OAE8B7I,mBAAS,QAFvC,mBAEP8I,EAFO,KAESC,EAFT,KAGRC,EAASpF,iBAAO,MAGhBqF,EAAWtJ,mBAAQ,kBAAM,IAAIC,OAAK,CACpCC,IAAK,CAACwI,EAAQjK,EAAUiK,EAAQvI,OAAS,KACzCoJ,MAAM,EACNnJ,OAAQ,QACR,IAuBEoJ,EAAc,SAACC,GAAD,OAAQP,GAAS,SAAAQ,GACjC,IAAMC,EAAWC,EAAgBF,GAEjC,OADAC,EAASE,MACFF,MAGLC,EAAkB,SAACF,GAAD,OAAeA,EAAUI,QAAO,SAAA7K,GAGpD,OADiBN,KAAKoL,IAAI,IAAIC,KAAS/K,EAAEgL,WADzBC,QAKd3I,EAAc,SAAAqB,GAChBwG,EAAkBxG,EAAEuH,cAAcC,QAAQ3I,OAQ9C,OALAjB,qBAAU,WACN8I,EAAS7I,OACT6I,EAAS5I,KAAK,EAAG,EAAG,OACrB,CAAC4I,IAGA,eAACT,EAAD,WACI,cAACE,GAAD,CAAe1C,IAAKgD,EAAQzB,OAAQ,OAApC,SACKqB,EAAMjK,KAAI,SAAC4G,EAAMyE,GAAP,OAAc,cAAC,EAAD,CAErB5G,IAAKmC,EAAKnC,IACVC,KAAMkC,EAAKlC,KACXG,KAAM+B,EAAK/B,KACXD,YAAagC,EAAK0E,MAClB3G,QAAS,kBAAM6F,EAAY5D,EAAK6D,KAChCjG,aAAc,SAAA+G,GAAE,OAAIlB,IAPC,eACRgB,SAUrB,cAACvB,EAAD,UACI,eAACN,EAAA,EAAD,WACKI,EAAW5J,KAAI,SAACK,EAAKgL,GAClB,IAAM5I,EAAI,iBAAa4I,GACvB,OACI,cAAC,EAAD,CAEIhL,IAAKuJ,EAAWyB,GAChB9I,YAAaA,EACbE,KAAMA,EACND,WAAY2H,IAAmB1H,GAJ1B4I,MAQjB,cAAC,EAAD,CAEIhL,IA7HX,6BA8HWkC,YAAaA,EACbE,KAAM,OACND,WAA+B,SAAnB2H,GAJP,aAQjB,cAAC,EAAD,CACIrB,cAxFU,kBAAMsB,EAAkB,SAyFlCrB,eAAgBoB,EAChBnB,SAjFK,kBAAMkB,GAAS,SAAAQ,GAC5B,IAAMc,EAAQ/L,EAnBH,GADK,EAqBVkL,EAAW,YAAI,IAAIc,MAAMD,IAAQxL,KAAI,SAAA0L,GACvC,IAAM9E,EAAO,CACT0E,MAAO7L,EAxBJ,KAyBHoF,KAAM/E,IAAoB,QAAU,SACpCmL,UAAW,IAAID,MAGbW,EAAe7L,IAAoB,MAAQ,OAC3C8L,EAAiBnM,EA3BX,IA6BZ,OADAmH,EAAK+E,GAAgBC,EAAiB,IAC/BhF,KAGLiF,EAAgBjB,EAAgBF,GAEtC,MAAM,GAAN,mBAAWmB,GAAX,YAA6BlB,QAiErBH,YAAaA,QCvJdsB,GARH,WACV,OACE,qBAAKjE,UAAU,MAAMkE,cAAY,MAAjC,SACE,cAAC,GAAD,OCKSC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhF,MAAK,YAAkD,IAA/CiF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.f8cf6e7f.chunk.js","sourcesContent":["// Returns number between 0 and the max\nexport const randomNum = (max) => {\n    return Math.floor(Math.random() * max)\n}\n\n// returns random bool\nexport const randomCondition = () => {\n    return randomNum(2) < 1\n}\n","import React, { useState, useMemo, useEffect } from 'react'\nimport { motion } from 'framer-motion'\nimport { Howl } from 'howler'\nimport styled from 'styled-components'\nimport { randomNum } from '../../helpers'\n\nconst soundDir = './audio/sfx/spaceship/'\nconst flyingSoundPaths = [\n    'future-engine.wav',\n    'machine-glitch.wav',\n    'traveling.wav',\n    'time-machine.wav',\n    'vibrating-engine.wav'\n]\n\nconst flyingSounds = flyingSoundPaths.map(s => `${soundDir}${s}`)\n\nconst spaceshipImg = './images/ufo.png'\n\nconst BouncingShip = styled(motion.img)`\n    height: 4em;\n    position: absolute;\n    top: 4em;\n    width: auto;\n    z-index: 1;\n`\n\nconst spaceshipVariants = {\n    flying: {\n        y: [0, 20, 0],\n        rotate: [0, 5, 20, 10, 0]\n    },\n    landed: {\n        y: [0, 5, 0],\n        transition: {\n            repeat: Infinity\n        }\n    }\n}\n\nconst Spaceship = () => {\n    const engineSound = useMemo(() => new Howl({\n        src: [flyingSounds[randomNum(flyingSounds.length - 1)]],\n        volume: 0.25\n    }), [])\n    const [isFlying, setIsFlying] = useState(true)\n\n    useEffect(() => {\n        if (isFlying) {\n            engineSound.play()\n            engineSound.fade(0, 1, 400)\n        } else {\n            engineSound.fade(engineSound.volume(), 0, 400)\n            engineSound.once('fade', () => engineSound.stop())\n        }\n    }, [engineSound, isFlying])\n\n    return (\n        <BouncingShip\n            layoutId=\"spaceship\"\n            variants={spaceshipVariants}\n            initial='flying'\n            animate={isFlying ? 'flying' : 'landed'}\n            transition={{\n                duration: 1\n            }}\n            src={spaceshipImg}\n            onAnimationComplete={() => {\n                if (isFlying) setIsFlying(false)\n            }}\n        />\n    )\n}\n\nexport default Spaceship\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { motion } from 'framer-motion'\nimport Spaceship from './Spaceship'\nimport { randomNum } from '../../helpers'\n\nconst PlanetContainer = styled(motion.div)`\n    align-items: center;\n    display: flex;\n    height: 50%;\n    margin: 1rem;\n    max-height: 20vw;\n    place-content: center;\n    position: relative;\n    text-align: center;\n    width: 30vw;\n\n    &:hover {\n        cursor: pointer;\n    }\n`\n\nconst PlanetImg = styled(motion.img)`\n    min-height: 8em;\n    z-index: 0;\n`\n\nconst Planet = ({\n    img,\n    handleClick,\n    isSelected,\n    name\n}) => {\n    const [hover, setHover] = useState(false)\n    // Need to handle clicks & \"taps\" which are caught with Framer-motion\n    // Only handle the click once - either on click or tap\n    const [tapped, setTapped] = useState(false)\n\n    const planetVariants = {\n        bounce: {\n            y: [-5, 5],\n            rotate: [-15, 15],\n            transition: {\n                duration: 0.8,\n                repeatType: 'reverse',\n                repeat: Infinity,\n                ease: \"easeInOut\",\n            }\n        },\n        circle: {\n            y: [0, -5, -15, -25, -30, -25, -15, -5, 0],\n            x: [0, 10, 15, 10, 0, -10, -15, -10, 0],\n            // rotate: [360, 0],\n            transition: {\n                repeat: Infinity,\n                duration: 0.8,\n                ease: \"linear\"\n            }\n        },\n        settle: {\n            y: [0, randomNum(10), 0],\n            rotate: [randomNum(-5), randomNum(10)],\n            transition: {\n                repeat: Infinity,\n                repeatType: 'reverse',\n                duration: 2,\n                ease: \"easeInOut\",\n                delay: randomNum(3)\n            }\n        },\n        zoom: {\n            scale: 1.2,\n            transition: {\n                duration: 0.6,\n                ease: \"backInOut\"\n            }\n        }\n    }\n\n    const animation = useCallback(() => {\n        return isSelected ? 'bounce' : hover ? 'circle' : 'settle'\n    }, [isSelected, hover])\n\n    const baseAnimation = useCallback(() => {\n        return isSelected ? 'zoom' : 'settle'\n    }, [isSelected])\n\n    return (\n        <PlanetContainer\n            onClick={e => {\n                if (!tapped) handleClick(e)\n            }}\n            data-name={name}\n            onTapStart={e => {\n                setTapped(true)\n                handleClick(e)\n            }}\n            onMouseEnter={e => {\n                if (!isSelected) {\n                    setHover(true)\n                }\n            }}\n            onMouseLeave={e => {\n                setHover(false)\n            }}\n        >\n            <PlanetImg\n                src={img}\n                variants={planetVariants}\n                initial='settle'\n                animate={name === 'base' ? baseAnimation() : animation()}\n            />\n            {isSelected && (\n                <Spaceship />\n            )}\n        </PlanetContainer>\n    )\n}\n\nexport default Planet\n","import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Howl } from 'howler'\nimport { motion, useAnimation } from 'framer-motion'\n\nimport { randomNum } from '../../helpers'\n\nconst smallStar = './images/star_small.png'\nconst mediumStar = './images/star_medium.png'\n\nconst soundDir = './audio/sfx/stars/'\nconst flyingSoundPaths = [\n    'fairy-swoosh.wav',\n    'fire-swoosh.wav',\n    'future-swoosh.wav',\n    'sweeping-swoosh.wav'\n]\nconst caughtSoundPaths = [\n    'fairy-flow.wav',\n    'flitter.wav',\n    'magic.wav'\n]\n\nconst flyingSounds = flyingSoundPaths.map(s => `${soundDir}shooting/${s}`)\nconst caughtSounds = caughtSoundPaths.map(s => `${soundDir}caught/${s}`)\n\nconst FlyingStar = styled(motion.img)`\n    height: 2.5em;\n    left: ${props => props.leftOffset};\n    position: absolute;\n    top: ${props =>  props.topOffset};\n    width: 2.5em;\n    z-index: 10;\n`\n\nconst CATCH_ANIM_TIME = 0.6\n\nconst Star = ({ containerRef, top, left, destroy, destroyTime, size }) => {\n    const controls = useAnimation()\n\n    const starRef = useRef(null)\n    const destroyTimeout = useRef(null)\n\n    const [isShooting, setIsShooting] = useState(false)\n    const [isCaught, setIsCaught] = useState(false)\n    const [soundPlayed, setSoundPlayed] = useState(false)\n\n    const shootSfx = useMemo(() => new Howl({\n        src: flyingSounds[randomNum(flyingSounds.length - 1)],\n        rate: 0.25,\n        volume: 0.05,\n    }), [])\n    const caughtSfx = useMemo(() => new Howl({\n        src: caughtSounds[randomNum(caughtSounds.length - 1)],\n        rate: 1.2,\n        volume: 0.8,\n    }), [])\n\n    const starVariants = {\n        shooting: {\n            rotate: 360,\n            opacity: ['0%', '80%', '100%', '80%', '0%'],\n            times: [0, 0.1, 0.5, 0.8, 1],\n            x: window.innerWidth,\n            y: window.innerHeight,\n            transition: {\n                duration: destroyTime\n            }\n        },\n        caught: {\n            scale: 2,\n            opacity: 0,\n            transition: {\n                duration: CATCH_ANIM_TIME\n            }\n        }\n    }\n\n    const options = useMemo(() => ({\n        root: containerRef.current,\n        rootMargin: '0px',\n        threshold: 1.0\n    }), [containerRef])\n\n    // Determines if star is visible & plays sfx\n    const checkStarVisible = useCallback((entries) => {\n        const [entry] = entries\n\n        if (entry.isIntersecting && !soundPlayed && starRef.current) {\n            shootSfx.play()\n            setSoundPlayed(true)\n        }\n    }, [soundPlayed, starRef, shootSfx])\n\n    useEffect(() => {\n        const star = starRef.current\n        const observer = new IntersectionObserver(checkStarVisible, options)\n\n        if (star) {\n            observer.observe(star)\n        }\n\n        return () => {\n            if (star) observer.unobserve(star)\n        }\n    }, [starRef, checkStarVisible, options])\n\n    // Handles shooting vs caught animations\n    // Stars are destroyed after caught & destroyTimeout is cleared\n    useEffect(() => {\n        if (isCaught) {\n            controls.stop()\n            caughtSfx.play()\n            shootSfx.fade(1, 0, 1000)\n            caughtSfx.fade(0, 1, 500).fade(1, 0, 2000)\n            controls.start('caught')\n                    .then(() => {\n                        destroy()\n                        clearTimeout(destroyTimeout.current)\n                    })\n        } else {\n            if (!isShooting) {\n                setIsShooting(true)\n                controls.start('shooting')\n                    .then(() => {\n                        destroy()\n                        clearTimeout(destroyTimeout.current)\n                    })\n            }\n        }\n    }, [isCaught, controls, destroy, isShooting, caughtSfx])\n\n    // Sets up timer to destroy star after animation time\n    useEffect(() => {\n        destroyTimeout.current = setTimeout(() => {\n            destroy()\n        }, destroyTime * 1000)\n\n        return function () {\n            clearTimeout(destroyTimeout.current)\n        }\n    }, [destroyTime, destroy])\n\n\n    return (\n        <FlyingStar\n            ref={starRef}\n            leftOffset={left || '-100px'}\n            topOffset={top || '-100px'}\n            src={size === 'small' ? smallStar : mediumStar}\n            variants={starVariants}\n            animate={controls}\n            onMouseEnter={e => setIsCaught(true)}\n        />\n    )\n}\n\nexport default Star\n","import React from 'react'\nimport styled from 'styled-components'\nimport { motion } from 'framer-motion'\n\nconst MotionButton = styled(motion.button)`\n    background: ${props => props.bgColor};\n    border: 0.16em solid rgba(255,255,255,0.35);\n    border-radius: 2em;\n    box-sizing: border-box;\n    color: #FFFFFF;\n    font-size: 2.8vw;\n    font-family: 'Roboto',sans-serif;\n    font-weight: 300;\n    flex-wrap: wrap;\n    height: 2em;\n    margin: 0.5em;\n    padding: 0.3em 1.2em;\n    position: relative;\n    text-decoration: none;\n    text-shadow: 0 0.04em 0.04em rgba(0,0,0,0.35);\n    text-align: center;\n    transition: all 0.2s;\n    z-index: 1;\n\n    &:hover {\n        border-color: ${props => props.selected ? props.bgColor : 'white'};\n        cursor: pointer;\n        font-weight: bold;\n    }\n\n    @media(min-width: 768px) {\n        flex-wrap: no-wrap;\n        font-size: 1.9vw;\n    }\n`\n\nconst BGColorButton = ({\n    color,\n    isSelected,\n    onClick,\n    onComplete\n}) => {\n    return (\n        <MotionButton\n            bgColor=\"transparent\"\n            selected={isSelected}\n            onClick={onClick}\n        >\n            {isSelected && (\n                <motion.div\n                    layoutId=\"btn-background\"\n                    className=\"btn-background\"\n                    initial={false}\n                    animate={{\n                        backgroundColor: color,\n                        borderColor: color\n                    }}\n                    transition={{\n                        type: \"spring\",\n                        stiffness: 500,\n                        damping: 30\n                    }}\n                    onAnimationComplete={onComplete}\n                />\n            )}\n            Click Me\n        </MotionButton>\n\n    )\n}\n\nexport default BGColorButton\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { motion, AnimateSharedLayout } from 'framer-motion'\n\nimport BGColorButton from './BGColorButton'\n\nconst SPIN_BTN_SIZE = 2\nconst SPIN_BTN_SCALE = 1.1\n// 1/10 of the scale to get increase (ex: 1.1 => 0.1)\n// 1/4 of the size to get radius\nconst SPIN_BTN_ANIM_OFFSET = -(SPIN_BTN_SIZE / 4) * (SPIN_BTN_SCALE / 10)\n\nconst MotionBackground = styled(motion.div)`\n    background: ${props => props.bgColor};\n    display: flex;\n    height: 100%;\n    place-content: center;\n    width: 100%;\n    z-index: 100;\n`\n\nconst BGButtonContainer = styled(motion.div)`\n    align-items: center;\n    display: flex;\n    flex-wrap: wrap;\n    margin: 0 auto;\n    place-content: center;\n    width: 75%;\n\n    @media(min-width: 768px) {\n        flex-wrap: nowrap;\n    }\n`\n\nconst SpinCloseButton = styled(motion.button)`\n    background: url('./images/white-close-btn.png');\n    background-repeat: no-repeat;\n    background-size: contain;\n    border: 0;\n    color: #fff;\n    display: inline-block;\n    font-family: Arial, sans-serif;\n    font-weight: 300;\n    height: ${SPIN_BTN_SIZE}rem;\n    left: 0;\n    margin: 1rem;\n    position: absolute;\n    top: 0;\n    width: ${SPIN_BTN_SIZE}rem;\n\n    &:hover {\n        cursor: pointer;\n    }\n`\n\nconst colors = [\n    '#ee4a4a',\n    '#bc74bb',\n    '#86aedf',\n    '#5bbe87',\n    '#ffb057',\n]\n\nconst sidebar = {\n    open: {\n        opacity: 1,\n        y: 0,\n        transition: {\n            duration: 0.5,\n            type: 'spring',\n            ease: 'linear',\n            bounce: 0.1,\n            restDelta: 0.25\n        }\n    },\n    closed: {\n        height: 0,\n        opacity: 0,\n        y: '100%',\n        transition: {\n            delay: 0.2,\n            type: \"spring\",\n            stiffness: 50,\n            damping: 10\n        }\n    }\n}\n\nconst ButtonsPanel = ({\n    clearSelected,\n    planetSelected,\n    addStars\n}) => {\n    const [selectedBtn, setSelectedBtn] = useState(colors[0])\n    const [isOpen, setIsOpen] = useState(false)\n\n    useEffect(() => {\n        if (planetSelected !== 'base') {\n            setIsOpen(true)\n        } else {\n            setIsOpen(false)\n        }\n    }, [planetSelected])\n\n    return (\n        <MotionBackground\n            bgColor=\"black\"\n            style={{\n                height: '12em',\n                width: '100%',\n            }}\n            animate={isOpen ? 'open' : 'closed'}\n            variants={sidebar}\n            onAnimationComplete={() => !isOpen && clearSelected()}\n        >\n            <SpinCloseButton\n                whileHover={{\n                    rotate: 90,\n                    scale: SPIN_BTN_SCALE,\n                    // offset to keep it centered\n                    y: `${SPIN_BTN_ANIM_OFFSET}rem`,\n                    x: `${SPIN_BTN_ANIM_OFFSET}rem`\n                }}\n                transition={{\n                    duration: 0.1\n                }}\n                onClick={e => {\n                    setIsOpen(false)\n                }}\n            />\n            <BGButtonContainer variants={{\n                open: { opacity: 1, y: 0 },\n                closed: { opacity: 0, y: '100%' }\n            }}>\n                <AnimateSharedLayout>\n                    {colors.map(c => (\n                        <BGColorButton\n                            key={c}\n                            color={c}\n                            isSelected={selectedBtn === c}\n                            onClick={() => setSelectedBtn(c)}\n                            onComplete={addStars}\n                        />\n                    ))}\n                </AnimateSharedLayout>\n            </BGButtonContainer>\n        </MotionBackground>\n    )\n}\n\nexport default ButtonsPanel\n","import React, { useState, useEffect, useRef, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Howl } from 'howler'\nimport { motion, AnimateSharedLayout } from 'framer-motion'\n\nimport Planet from './Planet'\nimport Star from './Star'\nimport ButtonsPanel from '../MenuPanel/Panel'\n\nimport { randomNum, randomCondition } from '../../helpers'\n\nconst soundDir = './audio/music/'\nconst bgMusicPaths = [\n    'Galactic-Renaissance.mp3',\n    'Jungle-Loop.mp3'\n]\n\nconst bgMusic = bgMusicPaths.map(p => `${soundDir}${p}`)\n\nconst planetImgs = [\n    './images/planets/mars.png',\n    './images/planets/jupiter.png',\n    './images/planets/rings.png',\n    './images/planets/moon.png',\n    './images/planets/blue.png'\n]\n\nconst base = './images/planets/earth.png'\nconst mapBg = `./images/background.jpg`\n\nconst MapContainer = styled.div`\n    background-image: url(${mapBg});\n    background-size: cover;\n    background-repeat: no-repeat;\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n    overflow: none;\n    width: 100%;\n`\n\nconst PlanetsContainer = styled.div`\n    align-content: space-evenly;\n    align-items: center;\n    box-sizing: border-box;\n    display: flex;\n    flex-wrap: wrap;\n    height: 100%;\n    justify-content: center;\n    padding: 3em 0;\n    width: 100%;\n`\n\nconst StarContainer = styled(motion.div)`\n    bottom: 0;\n    left: 0;\n    height: 100vh;\n    position: absolute;\n    width: 100vw;\n`\n\nconst STAR_SPEED = 6\nconst STAR_BASE_COUNT = 3\nconst STAR_COUNT = 5\nconst STAR_POS_OFFSET = 40\n\n// Should display a grid of earth & 5 other planets\n// Should have a menu at the bottom that pops up when you select a planet\nconst Map = () => {\n    const [stars, setStars] = useState([])\n    const [selectedPlanet, setSelectedPlanet] = useState('base')\n    const skyRef = useRef(null)\n    const clearSelected = () => setSelectedPlanet('base')\n\n    const mapMusic = useMemo(() => new Howl({\n        src: [bgMusic[randomNum(bgMusic.length - 1)]],\n        loop: true,\n        volume: 0.75\n    }), [])\n\n    // adds a random number of stars\n    const addStars = () => setStars(currStars => {\n        const count = randomNum(STAR_COUNT) + STAR_BASE_COUNT\n        const newStars = [...new Array(count)].map(_x => {\n            const star = {\n                speed: randomNum(STAR_SPEED) + STAR_SPEED,\n                size: randomCondition() ? 'small' : 'medium',\n                timestamp: new Date()\n            }\n            // just a way to decide to offset by left or top\n            const sideToOffset = randomCondition() ? 'top' : 'left'\n            const amountToOffset = randomNum(STAR_POS_OFFSET)\n            star[sideToOffset] = amountToOffset + '%'\n            return star\n        })\n\n        const filteredStars = destroyOldStars(currStars)\n\n        return [...filteredStars, ...newStars]\n    })\n\n    const destroyStar = (id) => setStars(currStars => {\n        const newStars = destroyOldStars(currStars)\n        newStars.pop()\n        return newStars\n    })\n\n    const destroyOldStars = (currStars) => currStars.filter(s => {\n        const oldTime = STAR_SPEED * 1000\n        const timeDiff = Math.abs(new Date() - s.timestamp)\n        return timeDiff < oldTime\n    })\n\n    const handleClick = e => {\n        setSelectedPlanet(e.currentTarget.dataset.name)\n    }\n\n    useEffect(() => {\n        mapMusic.play()\n        mapMusic.fade(0, 1, 200)\n    }, [mapMusic])\n\n    return (\n        <MapContainer>\n            <StarContainer ref={skyRef} height={'100%'}>\n                {stars.map((star, i) => (<Star\n                    key={`star-${i}`}\n                    top={star.top}\n                    left={star.left}\n                    size={star.size}\n                    destroyTime={star.speed}\n                    destroy={() => destroyStar(star.id)}\n                    containerRef={el => skyRef}\n                />))}\n            </StarContainer>\n\n            <PlanetsContainer>\n                <AnimateSharedLayout>\n                    {planetImgs.map((img, i) => {\n                        const name = `planet-${i}`\n                        return (\n                            <Planet\n                                key={i}\n                                img={planetImgs[i]}\n                                handleClick={handleClick}\n                                name={name}\n                                isSelected={selectedPlanet === name}\n                            />\n                        )\n                    })}\n                    <Planet\n                        key={'base'}\n                        img={base}\n                        handleClick={handleClick}\n                        name={'base'}\n                        isSelected={selectedPlanet === 'base'}\n                    />\n                </AnimateSharedLayout>\n            </PlanetsContainer>\n            <ButtonsPanel\n                clearSelected={clearSelected}\n                planetSelected={selectedPlanet}\n                addStars={addStars}\n                destroyStar={destroyStar}\n            />\n        </MapContainer>\n    )\n}\n\nexport default Map\n\n","import React from 'react'\nimport Map from './Map/Map'\n\n// A game experience\nconst App = () => {\n  return (\n    <div className=\"App\" data-testid=\"app\">\n      <Map/>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}